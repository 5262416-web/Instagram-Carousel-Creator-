<!DOCTYPE html><html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
  <title>Instagram Carousel Creator</title>
  <style>
    :root{
      --bg:#0f1115;--panel:#171a21;--ink:#e8ecf1;--muted:#98a2b3;--accent:#7c9cff;--line:#222736;--btn:#23293a;--warn:#ef4444;
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
    header{position:sticky;top:0;z-index:5;background:linear-gradient(180deg,var(--bg),rgba(15,17,21,.6));backdrop-filter: blur(6px);}
    .wrap{max-width:960px;margin:0 auto;padding:12px}
    .row{display:flex;gap:12px;flex-wrap:wrap}
    .col{flex:1 1 320px;background:var(--panel);border:1px solid var(--line);border-radius:14px;padding:12px}
    label{font-size:12px;color:var(--muted);display:block;margin-bottom:6px}
    textarea{width:100%;min-height:120px;resize:vertical;background:#0a0c12;color:var(--ink);border:1px solid var(--line);border-radius:10px;padding:10px;font-size:14px;line-height:1.5}
    select,input[type="number"],input[type="range"],input[type="text"]{width:100%;background:#0a0c12;color:var(--ink);border:1px solid var(--line);border-radius:10px;padding:8px}
    .controls{display:grid;grid-template-columns:1fr 1fr;gap:10px}
    .btn{appearance:none;border:1px solid var(--line);background:var(--btn);color:var(--ink);padding:10px 12px;border-radius:12px;font-weight:600}
    .btn.secondary{background:#0a0c12}
    .btn.warn{background:#2b0f13;border-color:#3a1218;color:#ffb4b4}
    .hint{color:var(--muted);font-size:12px}
    details{background:#0a0c12;border:1px solid var(--line);border-radius:12px;padding:10px}
    summary{cursor:pointer;color:var(--ink);font-weight:600}/* Slides strip */
.slides{display:flex;gap:10px;overflow-x:auto;padding-bottom:8px}
.slideCard{min-width:180px;background:#0b0e15;border:1px solid var(--line);border-radius:14px;padding:8px}
.slideHead{display:flex;align-items:center;justify-content:space-between;font-size:12px;color:var(--muted);margin-bottom:6px}
canvas.thumb{width:100%;height:auto;border-radius:10px;border:1px solid var(--line);background:#000}

.toolbar{display:flex;gap:8px;flex-wrap:wrap}
.pill{font-size:12px;border:1px solid var(--line);background:#0a0c12;padding:6px 8px;border-radius:999px}

footer{display:flex;justify-content:center;padding:24px}
.clear{opacity:.8}

.badge{display:inline-flex;align-items:center;gap:6px;padding:6px 8px;border-radius:999px;background:#101522;border:1px solid var(--line);font-size:12px;color:var(--muted)}
.accent{color:var(--accent)}

  </style>
</head>
<body>
  <header>
    <div class="wrap" style="display:flex;align-items:center;justify-content:space-between;gap:12px;flex-wrap:wrap">
      <div style="display:flex;align-items:center;gap:10px;flex:1 1 auto">
        <div class="badge">üì∏ Instagram Carousel Creator <span class="accent">1080√ó1320</span></div>
      </div>
      <button id="addSlideBtn" class="btn">+ –°–ª–∞–π–¥</button>
    </div>
  </header>  <main class="wrap">
    <div class="row">
      <div class="col" style="flex:1 1 380px">
        <label for="story">–ò—Å—Ç–æ—Ä–∏—è (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —Å–ª–∞–π–¥—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)</label>
        <textarea id="story" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏.\n\n–ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü, –æ—Ç–¥–µ–ª—ë–Ω–Ω—ã–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Å—Ç–∞–Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–∞–π–¥–æ–º."></textarea>
        <div class="toolbar" style="margin-top:10px">
          <button id="splitBtn" class="btn">‚ÜîÔ∏è –†–∞–∑–±–∏—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º</button>
          <button id="genSlidesBtn" class="btn secondary">üîÅ –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–∞–π–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞</button>
          <span class="hint">–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ~3 —Å–µ–∫—É–Ω–¥—ã (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)</span>
        </div><details style="margin-top:12px">
      <summary>–î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è</summary>
      <div class="controls" style="margin-top:10px">
        <div>
          <label>–®—Ä–∏—Ñ—Ç</label>
          <select id="fontFamily">
            <option value="Arial, sans-serif">Arial</option>
            <option value="'Helvetica Neue', Helvetica, Arial, sans-serif">Helvetica</option>
            <option value="'Times New Roman', Times, serif">Times New Roman</option>
            <option value="Georgia, serif">Georgia</option>
            <option value="'Courier New', Courier, monospace">Courier New</option>
          </select>
        </div>
        <div>
          <label>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (px) ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 16</label>
          <input id="fontSize" type="number" min="12" max="96" step="1" value="16" />
        </div>
        <div>
          <label>–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</label>
          <select id="textPosition">
            <option value="bottom">–°–Ω–∏–∑—É</option>
            <option value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</option>
            <option value="top">–°–≤–µ—Ä—Ö—É</option>
          </select>
        </div>
        <div>
          <label>–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ</label>
          <select id="textAlign">
            <option value="left">–°–ª–µ–≤–∞</option>
            <option value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</option>
            <option value="right">–°–ø—Ä–∞–≤–∞</option>
          </select>
        </div>
        <div>
          <label>–û—Ç—Å—Ç—É–ø—ã —Ç–µ–∫—Å—Ç–∞ (px)</label>
          <input id="padding" type="number" min="0" max="120" value="24" />
        </div>
        <div>
          <label>–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</label>
          <input id="lineHeight" type="number" min="1" max="2.4" step="0.1" value="1.4" />
        </div>
        <div>
          <label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label>
          <input id="textColor" type="text" value="#ffffff" />
        </div>
        <div>
          <label>–ù–µ–ø—Ä–æ–∑—Ä. –ø–æ–¥–ª–æ–∂–∫–∏ (0‚Äì1)</label>
          <input id="overlayAlpha" type="number" min="0" max="1" step="0.05" value="0.35" />
        </div>
        <div>
          <label>–í—ã—Å–æ—Ç–∞ –ø–æ–¥–ª–æ–∂–∫–∏ (%)</label>
          <input id="overlayHeightPct" type="number" min="15" max="90" value="42" />
        </div>
      </div>
    </details>
  </div>

  <div class="col" style="flex:1 1 420px">
    <div class="slideHead"><span>–°–ª–∞–π–¥—ã</span>
      <div class="pill">–î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Äî —Å–∫–∞—á–∞—Ç—å ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–æ–µ ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ</div>
    </div>
    <div id="slides" class="slides"></div>
  </div>
</div>

  </main>  <footer>
    <button id="clearBtn" class="btn warn clear">Clear Results ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)</button>
  </footer>  <input id="filePicker" type="file" accept="image/*" style="display:none" />  <script>
    // --- App State ---
    const W = 1080, H = 1320; // Instagram 3:4
    const state = {
      slides: [], // { text: string, imgSrc?: dataURL }
      currentTouchedSlide: null,
      settings: {
        fontFamily: 'Arial, sans-serif',
        fontSize: 16,
        textPosition: 'bottom',
        textAlign: 'left',
        padding: 24,
        lineHeight: 1.4,
        textColor: '#ffffff',
        overlayAlpha: 0.35,
        overlayHeightPct: 42,
      },
      autosaveTS: 0
    };

    // --- DOM ---
    const elStory = document.getElementById('story');
    const elSlides = document.getElementById('slides');
    const elFile = document.getElementById('filePicker');

    const bindSetting = (id, key, transform=(v)=>v, rev=(v)=>v) => {
      const el = document.getElementById(id);
      el.value = rev(state.settings[key]);
      el.addEventListener('input', () => { state.settings[key] = transform(el.value); renderAll(); queueAutosave(); });
    };

    bindSetting('fontFamily','fontFamily');
    bindSetting('fontSize','fontSize', v=>parseInt(v,10));
    bindSetting('textPosition','textPosition');
    bindSetting('textAlign','textAlign');
    bindSetting('padding','padding', v=>parseInt(v,10));
    bindSetting('lineHeight','lineHeight', v=>parseFloat(v));
    bindSetting('textColor','textColor');
    bindSetting('overlayAlpha','overlayAlpha', v=>parseFloat(v));
    bindSetting('overlayHeightPct','overlayHeightPct', v=>parseInt(v,10));

    // --- Text to slides ---
    function splitTextToSlides(t){
      const parts = t.replace(/\r/g,'').split(/\n\s*\n/g).map(s=>s.trim()).filter(Boolean);
      if(parts.length===0){ state.slides = []; return; }
      const old = state.slides;
      state.slides = parts.map((p,i)=>({ text: p, imgSrc: (old[i] && old[i].imgSrc) || undefined }));
    }

    document.getElementById('splitBtn').addEventListener('click', ()=>{
      splitTextToSlides(elStory.value);
      renderSlidesList();
      queueAutosave();
    });

    document.getElementById('genSlidesBtn').addEventListener('click', ()=>{
      splitTextToSlides(elStory.value);
      renderSlidesList();
      renderAll();
      queueAutosave();
    });

    document.getElementById('addSlideBtn').addEventListener('click', ()=>{
      state.slides.push({text: '–ù–æ–≤—ã–π —Å–ª–∞–π–¥', imgSrc: undefined});
      renderSlidesList();
      renderAll();
      queueAutosave();
    });

    // --- Rendering ---
    function createSlideCard(index){
      const wrap = document.createElement('div');
      wrap.className = 'slideCard';

      const head = document.createElement('div');
      head.className='slideHead';
      head.innerHTML = `<span>#${index+1}</span><button class="btn secondary" data-edit-text>–¢–µ–∫—Å—Ç</button>`;
      wrap.appendChild(head);

      const c = document.createElement('canvas');
      c.width = W; c.height = H; c.className='thumb';
      c.dataset.index = index;
      attachTouchHandlers(c, index);
      wrap.appendChild(c);

      // edit text
      head.querySelector('[data-edit-text]').addEventListener('click', ()=>{
        const newText = prompt('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ª–∞–π–¥–∞', state.slides[index].text || '');
        if(newText!==null){ state.slides[index].text = newText; renderSlideCanvas(c, index); queueAutosave(); }
      });

      // initial draw
      renderSlideCanvas(c, index);
      return wrap;
    }

    function renderSlidesList(){
      elSlides.innerHTML = '';
      state.slides.forEach((_,i)=>{
        elSlides.appendChild(createSlideCard(i));
      });
      if(state.slides.length===0){
        const empty = document.createElement('div');
        empty.className='hint';
        empty.textContent = '–ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–∞–π–¥–æ–≤. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–†–∞–∑–±–∏—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º¬ª, –ª–∏–±–æ –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–∞–π–¥—ã –≤—Ä—É—á–Ω—É—é.';
        elSlides.appendChild(empty);
      }
    }

    function renderAll(){
      document.querySelectorAll('canvas.thumb').forEach(cv=>{
        const idx = parseInt(cv.dataset.index,10);
        renderSlideCanvas(cv, idx);
      });
    }

    function measureMultiline(ctx, text, maxWidth, lineHeight){
      const words = text.split(/\s+/);
      const lines = [];
      let line = '';
      for(const w of words){
        const test = line ? line + ' ' + w : w;
        const m = ctx.measureText(test);
        if(m.width > maxWidth && line){
          lines.push(line);
          line = w;
        } else {
          line = test;
        }
      }
      if(line) lines.push(line);
      return {lines, height: lines.length * lineHeight};
    }

    function renderSlideCanvas(cv, index){
      const s = state.slides[index];
      const ctx = cv.getContext('2d');
      ctx.fillStyle = '#000';
      ctx.fillRect(0,0,W,H);

      const drawText = ()=>{
        ctx.save();
        ctx.fillStyle = state.settings.textColor;
        ctx.textAlign = state.settings.textAlign;
        const fs = state.settings.fontSize;
        const lh = Math.max(1, state.settings.lineHeight) * fs;
        ctx.font = `${fs}px ${state.settings.fontFamily}`;
        const pad = state.settings.padding;
        const maxW = W - pad*2;

        // compute lines
        const words = (s.text||'').split(/\s+/);
        const lines = [];
        let line = '';
        for(const w of words){
          const test = line ? line + ' ' + w : w;
          if(ctx.measureText(test).width > maxW && line){
            lines.push(line);
            line = w;
          } else {
            line = test;
          }
        }
        if(line) lines.push(line);

        // overlay position & height
        const overlayH = Math.round(H * (state.settings.overlayHeightPct/100));
        let baseY = 0;
        if(state.settings.textPosition==='bottom') baseY = H - overlayH;
        else if(state.settings.textPosition==='center') baseY = (H - overlayH)/2;
        else baseY = 0;

        // fade-out rectangle (semi-transparent)
        ctx.fillStyle = `rgba(0,0,0,${state.settings.overlayAlpha})`;
        ctx.fillRect(0, baseY, W, overlayH);

        // text block
        const align = state.settings.textAlign;
        const x = align==='left' ? pad : (align==='center' ? W/2 : W - pad);
        let y = baseY + pad + fs; // first baseline
        ctx.fillStyle = state.settings.textColor;
        for(const ln of lines){
          ctx.fillText(ln, x, y);
          y += lh;
          if(y > baseY + overlayH - pad) break; // stop if overflow
        }
        ctx.restore();
      };

      if(s.imgSrc){
        const img = new Image();
        img.onload = ()=>{
          // cover fit
          const rImg = img.width / img.height, rCan = W / H;
          let sx=0, sy=0, sw=img.width, sh=img.height;
          if(rImg > rCan){
            // wider than canvas -> crop sides
            const targetW = img.height * rCan;
            sx = (img.width - targetW)/2; sw = targetW;
          } else {
            // taller -> crop top/bottom
            const targetH = img.width / rCan;
            sy = (img.height - targetH)/2; sh = targetH;
          }
          ctx.drawImage(img, sx, sy, sw, sh, 0, 0, W, H);
          drawText();
        };
        img.src = s.imgSrc;
      } else {
        // no image: nice gradient placeholder
        const g = ctx.createLinearGradient(0,0,0,H);
        g.addColorStop(0,'#1a2030');
        g.addColorStop(1,'#0c1020');
        ctx.fillStyle = g; ctx.fillRect(0,0,W,H);
        // camera glyph
        ctx.fillStyle = '#253050';
        ctx.fillRect(W/2-60,H/2-45,120,90);
        ctx.beginPath(); ctx.arc(W/2, H/2, 26, 0, Math.PI*2); ctx.fillStyle='#1b2440'; ctx.fill();
        ctx.fillStyle='#6b7da6'; ctx.font='20px Arial'; ctx.textAlign='center';
        ctx.fillText('–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', W/2, H/2+70);
        drawText();
      }
    }

    // --- Touch handlers (short tap = replace/delete, long press = download) ---
    function attachTouchHandlers(cv, index){
      let t0 = 0, longPressed = false, timer = null;

      const start = (e)=>{
        e.preventDefault();
        longPressed = false; t0 = Date.now(); state.currentTouchedSlide = index;
        timer = setTimeout(()=>{ longPressed = true; downloadSlide(index); }, 650);
      };
      const end = (e)=>{
        e.preventDefault();
        clearTimeout(timer);
        if(!longPressed){
          // short tap: replace / delete photo
          shortTapReplace(index);
        }
        state.currentTouchedSlide = null;
      };

      cv.addEventListener('touchstart', start, {passive:false});
      cv.addEventListener('touchend', end, {passive:false});
      cv.addEventListener('mousedown', start);
      cv.addEventListener('mouseup', end);
    }

    function shortTapReplace(index){
      const s = state.slides[index];
      const hasImg = !!s.imgSrc;
      if(hasImg){
        const want = confirm('–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ?');
        if(!want) return;
      }
      // open picker
      elFile.onchange = async (e)=>{
        const file = e.target.files && e.target.files[0];
        if(!file){ return; }
        const dataURL = await fileToDataURL(file);
        state.slides[index].imgSrc = dataURL;
        renderAll();
        queueAutosave();
        elFile.value = '';
      };
      elFile.click();
      if(hasImg){ state.slides[index].imgSrc = undefined; renderAll(); queueAutosave(); }
    }

    function fileToDataURL(file){
      return new Promise((res,rej)=>{
        const fr = new FileReader();
        fr.onload = ()=>res(fr.result);
        fr.onerror = rej; fr.readAsDataURL(file);
      });
    }

    function downloadSlide(index){
      // render to offscreen full-res canvas and download
      const off = document.createElement('canvas');
      off.width=W; off.height=H;
      renderSlideCanvas(off, index);
      const a = document.createElement('a');
      a.href = off.toDataURL('image/jpeg', 0.92);
      a.download = `slide-${index+1}.jpg`;
      document.body.appendChild(a); a.click(); a.remove();
    }

    // --- Autosave in sessionStorage ---
    const SAVE_KEY = 'icc_session_v1';
    function queueAutosave(){
      state.autosaveTS = Date.now();
    }
    setInterval(()=>{
      if(!state.autosaveTS) return;
      if(Date.now() - state.autosaveTS >= 2900){
        try {
          const payload = { slides: state.slides, settings: state.settings, story: elStory.value };
          sessionStorage.setItem(SAVE_KEY, JSON.stringify(payload));
          state.autosaveTS = 0;
        } catch(e){ /* ignore quota */ }
      }
    }, 1000);

    function restore(){
      try{
        const raw = sessionStorage.getItem(SAVE_KEY);
        if(!raw) return;
        const data = JSON.parse(raw);
        Object.assign(state.settings, data.settings||{});
        document.getElementById('fontFamily').value = state.settings.fontFamily;
        document.getElementById('fontSize').value = state.settings.fontSize;
        document.getElementById('textPosition').value = state.settings.textPosition;
        document.getElementById('textAlign').value = state.settings.textAlign;
        document.getElementById('padding').value = state.settings.padding;
        document.getElementById('lineHeight').value = state.settings.lineHeight;
        document.getElementById('textColor').value = state.settings.textColor;
        document.getElementById('overlayAlpha').value = state.settings.overlayAlpha;
        document.getElementById('overlayHeightPct').value = state.settings.overlayHeightPct;
        state.slides = data.slides || [];
        elStory.value = data.story || '';
      }catch(e){/* ignore */}
    }

    // --- Clear (reset to defaults) ---
    document.getElementById('clearBtn').addEventListener('click', ()=>{
      if(!confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) return;
      state.slides = [];
      elStory.value = '';
      Object.assign(state.settings, {
        fontFamily: 'Arial, sans-serif',
        fontSize: 16,
        textPosition: 'bottom',
        textAlign: 'left',
        padding: 24,
        lineHeight: 1.4,
        textColor: '#ffffff',
        overlayAlpha: 0.35,
        overlayHeightPct: 42,
      });
      // reflect UI
      document.getElementById('fontFamily').value = state.settings.fontFamily;
      document.getElementById('fontSize').value = state.settings.fontSize;
      document.getElementById('textPosition').value = state.settings.textPosition;
      document.getElementById('textAlign').value = state.settings.textAlign;
      document.getElementById('padding').value = state.settings.padding;
      document.getElementById('lineHeight').value = state.settings.lineHeight;
      document.getElementById('textColor').value = state.settings.textColor;
      document.getElementById('overlayAlpha').value = state.settings.overlayAlpha;
      document.getElementById('overlayHeightPct').value = state.settings.overlayHeightPct;

      sessionStorage.removeItem(SAVE_KEY);
      renderSlidesList();
      renderAll();
    });

    // --- Init ---
    restore();
    renderSlidesList();
    renderAll();
  </script></body>
</html>
